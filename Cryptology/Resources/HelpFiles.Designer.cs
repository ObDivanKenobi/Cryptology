//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cryptology.Resources {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class HelpFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal HelpFiles() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cryptology.Resources.HelpFiles", typeof(HelpFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на         1) Берутся m, q - простые числа
        ///           q - примитивный элемент в Zm
        ///        2) А берёт alpha и вычисляет x = q^alpha mod m
        ///        3) B берёт beta и вычисляет y = q^beta mod m
        ///        Открытый ключ: (m, q, x, y)
        ///        4) A вычисляет число k1 = y^alpha mod m
        ///           B -//- k2 = x^beta mod m
        ///           При этом k1 = k2 = k
        ///        k - общий секретный ключ
        ///        
        ///        Взлом: решить уравнение q^alpha mod m или q^beta mod m.
        /// </summary>
        internal static string DiffiHellmanHelp {
            get {
                return ResourceManager.GetString("DiffiHellmanHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Параметры:
        ///p - случайное простое число
        ///g - примитивный элемент в Zp
        ///x - случайное число из {1 ... p-1}
        ///y = g^x mod p
        ///
        ///Шифрование:
        ///сообщение Q должно быть меньше p
        ///выбирается сессионный ключ k из {1 ... p-1}
        ///вычисляются a = g^k mod p, b = Q*y^k mod p
        ///пара a-b — шифротекст
        ///
        ///Шифротекст: a и b
        ///Открытый ключ: y, g, p
        ///Секретный ключ: x.
        /// </summary>
        internal static string ElGamal {
            get {
                return ResourceManager.GetString("ElGamal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Работа съемы Эль-Гамаля в режиме ЭЦП
        ///I. формирование открытого ключа (p, g, y) и выбор секретного
        ///аналогичен основному режиму.
        ///
        ///II. A ---(p, g, y)---&gt; B
        ///1) A выбирает k из {1 ... p-1} взаимно простое с p
        ///2) r = g^k mod p
        ///3) s = (Q - x*r)k^-1 mod p-1
        ///4) (r, s) является подписью сообщения Q
        ///
        ///III. проверка
        ///A ---(Q, [r, s])---&gt; B
        ///1) 0 &lt;= r &lt; p, 0 &lt;= s &lt; p-1
        ///2) y^r*r^s = g^Q mod p
        ///Если выполняется, то это действительно А..
        /// </summary>
        internal static string ElGamalDigitalSignature {
            get {
                return ResourceManager.GetString("ElGamalDigitalSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на         Супервозрастающая последовательность: w_(k+1) = Sum(i = 1..k)(w_i)
        ///        
        ///        Шифрование:        
        ///        Исходный текст представляется в двоичном виде и разбивается на блоки,
        ///        равные по длине с открытым ключом.
        ///        Далее из последовательности, образующей открытый ключ, выбираются 
        ///        только те элементы, которые по порядку соответствуют 1 в двоичной 
        ///        записи исходного текста, игнорируя при этом элементы, 
        ///        соответствующие 0 биту. 
        ///        После этого элем [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string MerkleHellmanHelp {
            get {
                return ResourceManager.GetString("MerkleHellmanHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Криптосистема без передачи ключей
        ///p - простое число
        ///a * alpha = 1 (mod phi(p))
        ///b * beta = 1 (mod phi(p))
        ///
        ///m — сообщение, отправляемое А
        ///A                            B
        ///m1 = m^a mod p ------------&gt; m1
        ///m2 &lt;------------------------ m2 = m1^b mod p
        ///m3 = m2^alpha mod p -------&gt; m3
        ///							 m4 = m3^beta mod p = m
        ///Сообщение получено B..
        /// </summary>
        internal static string NoKeyTransmissionHelp {
            get {
                return ResourceManager.GetString("NoKeyTransmissionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на                 А                          B
        ///    I. 1) Выбор простых чисел (достаточно больших)
        ///              p1, p2                     q1, q2
        ///       2) Вычислить
        ///             r_a = p1*p2               r_b = q1*q2
        ///       phi(r_a) = (p1-1)(p2-1)    phi(r_b) = (q1-1)(q2-1)
        ///     
        ///    II. 4) Выбирается
        ///               a                           b 
        ///          1 &lt; a &lt; phi(r_a)           1 &lt; b &lt; phi(r_b)
        ///        gcd(a, phi(r_a)) = 1       gcd(b, phi(r_b)) = 1
        ///
        ///        5) Открытый ключ
        ///            (r_a [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string RSA_Help {
            get {
                return ResourceManager.GetString("RSA_Help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на I. Выбор параметров:
        ///   1) p, q - простые числа, (p-1) делится на q
        ///      g /in Z_p: g^q = 1 mod p, g != 1
        ///   2) A выбирает секретный ключ k и вычисляет y по ф-ле
        ///      y = q^-k в Z_p
        ///   3) А выбирает случайное число a /in {1 ... q-1} и вычисляет
        ///      r = q^a mod p
        ///   4) A ---(y, r)---&gt; B
        ///
        ///II. Аутентификация:
        ///   В проверяет А
        ///   1) выбирает случайное число e и передаёт A: B ---(e)---&gt; A
        ///   2) А вычисляет s = a + ke (mod q), A ---(s)---&gt; B
        ///   3) B проверяет, что r = g^s*y^e mod p .
        /// </summary>
        internal static string ShnorrHelp {
            get {
                return ResourceManager.GetString("ShnorrHelp", resourceCulture);
            }
        }
    }
}
